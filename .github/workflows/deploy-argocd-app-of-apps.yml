# Deploy - ArgoCD App Of Apps
# ==========================
# Reusable workflow to deploy a Helm chart in an ArgoCD App Of Apps Pattern context.
# See <https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping/#app-of-apps-pattern>.
#
# This workflow is triggered by a repository dispatch event.
# See <https://docs.github.com/en/actions/reference/events-that-trigger-workflows#repository_dispatch>.
# Payload:
# {
#   "event_type": "deploy",
#   "client_payload": {
#     "deployment-id": "unique deployment id (e.g. 1234)",
#     "environment": "where to deploy application (e.g. reviews-app, staging, production)",
#     "repository": "repository name (e.g. my-repository)",
#     "chart": "full chart name image tag (e.g. ghcr.io/my-org/my-repository/charts/application:0.1.14-pr-82-xxx)",
#     "chart-values": "Values to be replaced in the chart (e.g. [{\"path\":\"application.appUri\",\"value\":\"https://my-app-review-app-1234.my-org.com\"}])",
#     "url": "The URL which respond to deployed application (e.g. https://my-app-review-app-1234.my-org.com)",
#   }
# }
#
# It supports templated Application.

name: Deploy ArgoCD App of Apps

on:
  workflow_call:
    inputs:
      runs-on:
        description: |
          Json array of runner(s) to use.
          See <https://docs.github.com/en/actions/using-jobs/choosing-the-runner-for-a-job>.
        type: string
        default: '["ubuntu-latest"]'
        required: false
      template-filename:
        description: Filename of the template to use.
        required: false
        type: string
        default: "template.yml.tpl"
      github-app-id:
        description: |
          GitHub App ID to generate GitHub token in place of github-token.
          See <https://github.com/actions/create-github-app-token>.
        required: false
        type: string
    secrets:
      github-token:
        description: |
          GitHub token for creating and merging pull request (permissions contents: write and pull-requests: write, workflows: write).
          See <https://github.com/hoverkraft-tech/ci-github-common/blob/main/actions/create-and-merge-pull-request/README.md>.
      github-app-key:
        description: |
          GitHub App private key to generate GitHub token in place of github-token.
          See <https://github.com/actions/create-github-app-token>.
    outputs:
      deployment-id:
        description: "Deployment ID"
        value: ${{ jobs.publish-manifest.outputs.deployment-id }}
      repository:
        description: "Source repository name"
        value: ${{ jobs.publish-manifest.outputs.repository }}
      url:
        description: "Deployment URL"
        value: ${{ jobs.publish-manifest.outputs.url }}

permissions:
  contents: read
  pull-requests: write
  # FIXME: This is a workaround for having workflow actions. See https://github.com/orgs/community/discussions/38659
  id-token: write

jobs:
  publish-manifest:
    runs-on: ${{ fromJson(inputs.runs-on) }}
    outputs:
      deployment-id: ${{ steps.check-client-payload.outputs.deployment-id }}
      repository: ${{ steps.check-client-payload.outputs.repository }}
      url: ${{ steps.check-client-payload.outputs.url }}
    steps:
      - id: check-client-payload
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("node:fs");
            const path = require("node:path");

            const deploymentId = ${{ toJSON(github.event.client_payload['deployment-id']) }};
            if (!deploymentId) {
              return core.setFailed("Deployment ID is not defined in the client payload");
            }
            core.setOutput("deployment-id", deploymentId);

            let environment = ${{ toJSON(github.event.client_payload.environment) }};
            if (!environment) {
              return core.setFailed("Environment is not defined in the client payload");
            }
            core.setOutput("environment", environment);

            const repository = ${{ toJSON(github.event.client_payload.repository) }};
            if (!repository) {
              return core.setFailed("Repository is not defined in the client payload");
            }
            core.setOutput("repository", repository);

            const url = ${{ toJSON(github.event.client_payload.url) }};
            if (url) {
              core.setOutput("url", url);
            }

            const chart = ${{ toJSON(github.event.client_payload.chart) }};
            if (!chart) {
              return core.setFailed("Chart is not defined in the client payload");
            }
            core.setOutput("chart", chart);

            const chartValues = ${{ toJSON(github.event.client_payload['chart-values']) }};
            if (chartValues) {
              core.setOutput("chart-values", chartValues);
            }

      - id: chart-variables
        uses: hoverkraft-tech/ci-github-container/actions/helm/parse-chart-uri@0.23.1
        with:
          uri: ${{ steps.check-client-payload.outputs.chart }}

      - uses: actions/checkout@v4

        # FIXME: This is a workaround for having workflow actions. See https://github.com/orgs/community/discussions/38659
      - id: oidc
        uses: ChristopherHX/oidc@v3

      - uses: actions/checkout@v4
        with:
          path: ./self-workflow
          repository: ${{ steps.oidc.outputs.job_workflow_repo_name_and_owner }}
          ref: ${{ steps.oidc.outputs.job_workflow_repo_ref }}
          sparse-checkout: |
            actions
      - run: |
          if [ -f .gitignore ]; then grep -q "self-workflow" .gitignore || echo "self-workflow" >> .gitignore; else echo "self-workflow" >> .gitignore; fi
          if [ -f .dockerignore ]; then grep -q "self-workflow" .dockerignore || echo "self-workflow" >> .dockerignore; else echo "self-workflow" >> .dockerignore; fi

      - id: get-namespace
        uses: actions/github-script@v7
        with:
          script: |
            const namespace = `${{ steps.check-client-payload.outputs.repository }}-${{ steps.check-client-payload.outputs.environment }}`;
            core.setOutput("namespace", namespace);

      - id: slugify-namespace
        uses: hoverkraft-tech/ci-github-common/actions/slugify@0.16.0
        with:
          value: ${{ steps.get-namespace.outputs.namespace }}

      - id: get-manifest-files
        uses: ./self-workflow/actions/argocd/get-manifest-files
        with:
          environment: ${{ steps.check-client-payload.outputs.environment }}
          repository: ${{ steps.check-client-payload.outputs.repository }}

      - id: get-manifest-templates
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("node:fs");
            const path = require("node:path");

            const templateFilename = ${{ toJSON(inputs.template-filename) }};
            if (!templateFilename) {
              return core.setFailed(`Template filename is not defined`);
            }

            const applicationFile = ${{ toJSON(steps.get-manifest-files.outputs.application-file) }};
            if (!applicationFile) {
              return core.setFailed(`Application file is not defined`);
            }

            const namespaceFile = ${{ toJSON(steps.get-manifest-files.outputs.namespace-file) }};
            if (!namespaceFile) {
              return core.setFailed(`Namespace file is not defined`);
            }

            const applicationTemplateFile = `${path.dirname(applicationFile)}/${templateFilename}`;
            const isTemplateApplication = fs.existsSync(applicationTemplateFile);
            if (!isTemplateApplication) {
              return;
            }

            await io.cp(applicationTemplateFile, applicationFile, { force: true });

            const namespaceTemplateFile = `${path.dirname(namespaceFile)}/${templateFilename}`;
            if (!fs.existsSync(namespaceTemplateFile)) {
              return core.setFailed(`No template file found in "${namespaceTemplateFile}"`);
            }

            await io.cp(namespaceTemplateFile, namespaceFile, { force: true });

      - uses: ./self-workflow/actions/deploy/argocd-manifest-files
        with:
          deployment-id: ${{ steps.check-client-payload.outputs.deployment-id }}
          application-file: ${{ steps.get-manifest-files.outputs.application-file }}
          namespace-file: ${{ steps.get-manifest-files.outputs.namespace-file }}
          namespace: ${{ steps.slugify-namespace.outputs.result }}
          chart-name: ${{ steps.chart-variables.outputs.name }}
          chart-repository: ${{ steps.chart-variables.outputs.repository }}
          chart-version: ${{ steps.chart-variables.outputs.version }}
          chart-values: ${{ steps.check-client-payload.outputs.chart-values }}

      - uses: actions/create-github-app-token@v1
        if: inputs.github-app-id
        id: generate-token
        with:
          app-id: ${{ inputs.github-app-id }}
          private-key: ${{ secrets.github-app-key }}

      - uses: hoverkraft-tech/ci-github-common/actions/create-and-merge-pull-request@0.16.0
        with:
          github-token: ${{ steps.generate-token.outputs.token || secrets.github-token || github.token }}
          branch: feat/deploy-${{ steps.slugify-namespace.outputs.result }}
          title: "feat(${{ steps.check-client-payload.outputs.repository }}): deploy ${{ steps.chart-variables.outputs.version }} to ${{ steps.check-client-payload.outputs.environment }}"
          body: Deploy ${{ steps.check-client-payload.outputs.repository }} ${{ steps.chart-variables.outputs.version }} to ${{ steps.check-client-payload.outputs.environment }}
          commit-message: |
            feat(${{ steps.check-client-payload.outputs.repository }}): deploy ${{ steps.chart-variables.outputs.version }} to ${{ steps.check-client-payload.outputs.environment }}"

            [skip ci]
