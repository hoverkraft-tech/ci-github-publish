# Deploy workflow to deploy a Helm chart in an ArgoCD App Of Apps Pattern context.
# See <https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping/#app-of-apps-pattern>.
#
# This workflow is triggered by a repository dispatch event.
# See <https://docs.github.com/en/actions/reference/events-that-trigger-workflows#repository_dispatch>.
# Payload:
# {
#   "event_type": "deploy",
#   "client_payload": {
#     "deployment-id": "unique deployment id (e.g. 1234)",
#     "environment": "where to deploy application (e.g. reviews-app, staging, production)",
#     "repository": "repository name (e.g. my-repository)",
#     "chart": "full chart name image tag (e.g. ghcr.io/my-org/my-repository/charts/application:0.1.14-pr-82-xxx)",
#     "chart-values": "Values to be replaced in the chart (e.g. [{\"path\":\"application.appUri\",\"value\":\"https://my-app-review-app-1234.my-org.com\"}])"
#   }
# }
#
# It supports templated Application.

name: Deploy ArgoCD App of Apps

on:
  workflow_call:
    inputs:
      runs-on:
        description: |
          Json array of runner(s) to use.
          See <https://docs.github.com/en/actions/using-jobs/choosing-the-runner-for-a-job>.
        type: string
        default: '["ubuntu-latest"]'
        required: false
      template-filename:
        description: Filename of the template to use.
        required: false
        type: string
        default: "template.yml.tpl"
      github-app-id:
        description: |
          GitHub App ID to generate GitHub token in place of github-token.
          See <https://github.com/actions/create-github-app-token>.
        required: false
        type: string
    secrets:
      github-token:
        description: |
          GitHub token for creating and merging pull request (permissions contents: write and pull-requests: write, workflows: write).
          See <https://github.com/hoverkraft-tech/ci-github-common/blob/main/actions/create-and-merge-pull-request/README.md>.
      github-app-key:
        description: |
          GitHub App private key to generate GitHub token in place of github-token.
          See <https://github.com/actions/create-github-app-token>.

permissions:
  contents: read
  pull-requests: write
  # FIXME: This is a workaround for having workflow actions. See https://github.com/orgs/community/discussions/38659
  id-token: write

jobs:
  prepare-variables:
    runs-on: ${{ fromJson(inputs.runs-on) }}
    outputs:
      chart-repository: ${{ steps.chart-variables.outputs.repository }}
      chart-name: ${{ steps.chart-variables.outputs.name }}
      chart-version: ${{ steps.chart-variables.outputs.version }}
      app-template: ${{ steps.files-variables.outputs.app-template }}
      application-file: ${{ steps.files-variables.outputs.application-file }}
      manifest-template: ${{ steps.files-variables.outputs.manifest-template }}
      manifest-file: ${{ steps.files-variables.outputs.manifest-file }}
      namespace: ${{ steps.slugify-namespace.outputs.result }}
      deployment-id: ${{ steps.check-client-payload.outputs.deployment-id }}
    steps:
      - uses: actions/checkout@v4

      - id: check-client-payload
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("node:fs");
            const path = require("node:path");

            const deploymentId = ${{ toJSON(github.event.client_payload['deployment-id']) }};
            if (!deploymentId) {
              core.setFailed("Deployment ID is not defined in the client payload");
              return;
            }
            core.setOutput("deployment-id", deploymentId);

            const environment = ${{ toJSON(github.event.client_payload.environment) }};
            if (!environment) {
              core.setFailed("Environment is not defined in the client payload");
              return;
            }
            core.setOutput("environment", environment);

            const globber = await glob.create(`./*/apps/${environment}/`,{ implicitDescendants: false, matchDirectories: true });
            const paths = await globber.glob();
            if (paths.length === 0) {
              core.setFailed(`No environment dir found for ${environment}`);
              return;
            }

            if (paths.length > 1) {
              core.setFailed(`Multiple environment dirs found for ${environment}: ${paths.join(", ")}`);
              return;
            }

            const environmentDir = paths[0];

            const repository = ${{ toJSON(github.event.client_payload.repository) }};

            if (!repository) {
              core.setFailed("Repository is not defined in the client payload");
              return;
            }

            core.setOutput("repository", repository);

            const applicationDir = `${environmentDir}/${repository}`;
            if (!fs.existsSync(applicationDir)) {
              core.setFailed(`No application dir found for "${repository}" in "${environmentDir}"`);
              return;
            }
            core.setOutput("application-dir", applicationDir);

            // Check if the application dir has a manifest dir
            const rootDir = path.resolve(`${environmentDir}/../..`);

            const manifestDir = `${rootDir}/manifests/${environment}/${repository}`;
            if (!fs.existsSync(manifestDir)) {
              core.setFailed(`No manifest dir found in "${manifestDir}"`);
              return;
            }

            core.setOutput("manifest-dir", path.relative(${{ toJSON(github.workspace) }}, manifestDir));

      - id: chart-variables
        uses: hoverkraft-tech/ci-github-container/actions/helm/parse-chart-uri@0.23.1
        with:
          uri: ${{ github.event.client_payload.chart }}

      - id: files-variables
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("node:fs");
            const path = require("node:path");

            const templateFilename = ${{ toJSON(inputs.template-filename) }};
            if (!templateFilename) {
              core.setFailed(`Template filename is not defined`);
              return;
            }

            const repository = ${{ toJSON(steps.check-client-payload.outputs.repository) }};
            const applicationDir = ${{ toJSON(steps.check-client-payload.outputs.application-dir) }};
            const manifestDir = ${{ toJSON(steps.check-client-payload.outputs.manifest-dir) }};
            const environment = ${{ toJSON(steps.check-client-payload.outputs.environment) }};

            // Check if the application dir has a template file
            const applicationTemplateFile = `${applicationDir}/${templateFilename}`;
            const isTemplateApplication = fs.existsSync(applicationTemplateFile);

            // Template application
            if (isTemplateApplication) {
              const manifestTemplateFile = `${manifestDir}/${templateFilename}`;
              if (!fs.existsSync(manifestTemplateFile)) {
                core.setFailed(`No template file found in "${templateFile}"`);
                return;
              }

              // Get namespace discriminator from chart version
              // See https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
              const version = ${{ toJSON(steps.chart-variables.outputs.version) }};
              const regex = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/gm;
              const match = regex.exec(version);
              if (!match) {
                core.setFailed(`Invalid version format: ${version}`);
                return;
              }

              const prerelease = match[4];

              const templateDiscriminator = prerelease || version;

              const namespace = `${repository}-${templateDiscriminator}`;
              core.setOutput("namespace", namespace);

              const applicationFile = `${applicationDir}/${templateDiscriminator}.yml`;
              core.setOutput("application-file", path.relative(${{ toJSON(github.workspace) }}, applicationFile));

              const manifestFile = `${manifestDir}/${templateDiscriminator}.yml`;
              core.setOutput("manifest-file", path.relative(${{ toJSON(github.workspace) }}, manifestFile));

              return;
            }

            // Static application
            const namespace = `${repository}-${environment}`;
            core.setOutput("namespace", namespace);

            const applicationFile = `${applicationDir}/${repository}.yml`;
            if (!fs.existsSync(applicationFile)) {
              core.setFailed(`No application file found in "${applicationFile}"`);
              return;
            }

            core.setOutput("application-file", path.relative(${{ toJSON(github.workspace) }}, applicationFile));

            const manifestFile = `${manifestDir}/${repository}.yml`;
            if(!fs.existsSync(manifestFile)) {
              core.setFailed(`No manifest file found in "${manifestFile}"`);
              return;
            }

            core.setOutput("manifest-file", path.relative(${{ toJSON(github.workspace) }}, manifestFile));

      - id: slugify-namespace
        uses: hoverkraft-tech/ci-github-common/actions/slugify@0.16.0
        with:
          value: ${{ steps.files-variables.outputs.namespace }}

  publish-manifest:
    needs: prepare-variables
    runs-on: ${{ fromJson(inputs.runs-on) }}
    steps:
      - uses: actions/checkout@v4

      - if: needs.prepare-variables.outputs.app-template != ''
        run: cp "${{ needs.prepare-variables.outputs.app-template }}" "${{ needs.prepare-variables.outputs.application-file }}"

        # FIXME: This is a workaround for having workflow actions. See https://github.com/orgs/community/discussions/38659
      - id: oidc
        uses: ChristopherHX/oidc@v3

      - uses: actions/checkout@v4
        with:
          path: ./self-workflow
          repository: ${{ steps.oidc.outputs.job_workflow_repo_name_and_owner }}
          ref: ${{ steps.oidc.outputs.job_workflow_repo_ref }}
          sparse-checkout: |
            actions
      - run: |
          echo "self-workflow" >> .gitignore
          echo "self-workflow" >> .dockerignore

      - uses: ./self-workflow/actions/deploy/argocd-application-manifest
        with:
          manifest-file: ${{ needs.prepare-variables.outputs.application-file }}
          deployment-id: ${{ needs.prepare-variables.outputs.deployment-id }}
          namespace: ${{ needs.prepare-variables.outputs.namespace }}
          chart-name: ${{ needs.prepare-variables.outputs.chart-name }}
          chart-repository: ${{ needs.prepare-variables.outputs.chart-repository }}
          chart-version: ${{ needs.prepare-variables.outputs.chart-version }}
          chart-values: ${{ github.event.client_payload.chart-values }}

      - if: needs.prepare-variables.outputs.manifest-template != '' && needs.prepare-variables.outputs.manifest-file != ''
        run: cp "${{ needs.prepare-variables.outputs.manifest-template }}" "${{ needs.prepare-variables.outputs.manifest-file }}"

      - if: needs.prepare-variables.outputs.manifest-file != ''
        uses: mikefarah/yq@v4.45.1
        with:
          cmd: |
            yq -i '
              .metadata.name = "${{ needs.prepare-variables.outputs.namespace }}" |
              .metadata.annotations["app.kubernetes.io/instance"] = "${{ needs.prepare-variables.outputs.namespace }}"
            ' ${{ needs.prepare-variables.outputs.manifest-file }}

      - uses: actions/create-github-app-token@v1
        if: inputs.github-app-id
        id: generate-token
        with:
          app-id: ${{ inputs.github-app-id }}
          private-key: ${{ secrets.github-app-key }}

      - uses: hoverkraft-tech/ci-github-common/actions/create-and-merge-pull-request@0.16.0
        with:
          github-token: ${{ steps.generate-token.outputs.token || secrets.github-token || github.token }}
          branch: feat/deploy-${{  needs.prepare-variables.outputs.namespace }}
          title: "feat(${{ github.event.client_payload.repository }}): deploy ${{ needs.prepare-variables.outputs.chart-version }} to ${{ github.event.client_payload.environment }}"
          body: Deploy ${{ needs.prepare-variables.outputs.chart-version }} to ${{ github.event.client_payload.environment }}
          commit-message: |
            feat(${{ github.event.client_payload.repository }}): deploy ${{ needs.prepare-variables.outputs.chart-version }} to ${{ github.event.client_payload.environment }}"

            [skip ci]
