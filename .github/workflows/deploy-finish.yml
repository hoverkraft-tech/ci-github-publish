# Reusable workflow that performs the end of a deployment.
#
# What this workflow does:
#
# - If the deployment exposes a URL, run [deploy checks](./deploy-checks.yml):
# - Update the GitHub deployment status (success or failure).
# - Publish a human-readable deployment summary using the deploy/report action.
#   See [report](../../actions/deploy/report/README.md).
#   - Lighthouse report URL if available.
#   - Extra information if provided.

---
name: Deploy - Finish

on:
  workflow_call:
    inputs:
      runs-on:
        description: |
          JSON array of runner(s) to use.
          See https://docs.github.com/en/actions/using-jobs/choosing-the-runner-for-a-job.
        type: string
        default: '["ubuntu-latest"]'
        required: false
      deployment-id:
        description: |
          Deployment ID to use for the deployment.
          See https://docs.github.com/en/rest/deployments/deployments?apiVersion=2022-11-28#list-deployments.
        type: string
        required: true
      budget-path:
        description: |
          Path to the budget file to use for the Lighthouse check.
          See [`url-lighthouse`](../../actions/check/url-lighthouse/README.md).
        type: string
        required: false
        default: "./budget.json"
      extra:
        description: |
          Extra information to send to the deployment summary.
          Should be a JSON object.
        type: string
        required: false

permissions:
  contents: read
  issues: read
  pull-requests: write
  actions: read
  deployments: write
  # FIXME: This is a workaround for having workflow actions. See https://github.com/orgs/community/discussions/38659
  id-token: write

jobs:
  get-finished-deployment:
    name: Get finished deployment
    runs-on: ${{ fromJson(inputs.runs-on) }}
    outputs:
      url: ${{ steps.get-finished-deployment.outputs.url }}
      environment: ${{ steps.get-finished-deployment.outputs.environment }}
    steps:
      # jscpd:ignore-start
      # FIXME: This is a workaround for having workflow actions. See https://github.com/orgs/community/discussions/38659
      - id: oidc
        uses: ChristopherHX/oidc@73eee1ff03fdfce10eda179f617131532209edbd # v3

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: ./self-workflow
          repository: ${{ steps.oidc.outputs.job_workflow_repo_name_and_owner }}
          ref: ${{ steps.oidc.outputs.job_workflow_repo_ref }}
          sparse-checkout: |
            actions
      - run: |
          if [ -f .gitignore ]; then grep -q "self-workflow" .gitignore || echo "self-workflow" >> .gitignore; else echo "self-workflow" >> .gitignore; fi
          if [ -f .dockerignore ]; then grep -q "self-workflow" .dockerignore || echo "self-workflow" >> .dockerignore; else echo "self-workflow" >> .dockerignore; fi
      # jscpd:ignore-end
      - id: get-workflow-failure
        if: ${{ inputs.deployment-id }}
        uses: ./self-workflow/actions/workflow/get-workflow-failure
        with:
          github-token: ${{ secrets.github-token || github.token }}

      - id: get-finished-deployment
        if: ${{ inputs.deployment-id && steps.get-workflow-failure.outputs.has-failed != 'true' }}
        uses: ./self-workflow/actions/deployment/get-finished
        with:
          deployment-id: ${{ inputs.deployment-id }}

      # FIXME: This is a workaround for having workflow actions. See https://github.com/orgs/community/discussions/38659
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        if: always() && steps.oidc.outputs.job_workflow_repo_name_and_owner
        with:
          path: ./self-workflow
          repository: ${{ steps.oidc.outputs.job_workflow_repo_name_and_owner }}
          ref: ${{ steps.oidc.outputs.job_workflow_repo_ref }}
          sparse-checkout: |
            actions

  deploy-checks:
    name: Deploy checks
    needs: [get-finished-deployment]
    if: ${{ needs.get-finished-deployment.outputs.url }}
    uses: ./.github/workflows/deploy-checks.yml
    with:
      runs-on: ${{ fromJson(inputs.runs-on) }}
      url: ${{ needs.get-finished-deployment.outputs.url }}
      budget-path: ${{ inputs.budget-path }}
      print-summary: false

  deploy-result:
    name: Deploy result
    if: ${{ always() }}
    needs: [get-finished-deployment, deploy-checks]
    runs-on: ${{ fromJson(inputs.runs-on) }}
    steps:
      - id: get-extra
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          script: |
            const extraInput = ${{ toJSON(inputs.extra) }};
            let extra = null;
            if (extraInput) {
              // Check if is valid JSON
              try {
                extra = JSON.parse(extraInput);
              } catch (error) {
                return core.setFailed(`"extra" input is not a valid JSON: ${error}`);
              }

              if (!extra || typeof extra !== 'object') {
                return core.setFailed(`"extra" input is not a valid JSON object.`);
              }
            }

            const deployChecksSummaryOutput = ${{ toJson(needs.deploy-checks.outputs.summary) }};
            let deployChecksSummary = null;
            if (deployChecksSummaryOutput) {
              try {
                deployChecksSummary = JSON.parse(deployChecksSummaryOutput);
              } catch (error) {
                return core.setFailed(`"deploy-checks" job summary output is not a valid JSON: ${error}`);
              }
            }

            if (deployChecksSummary) {
              const toSentence = (str) => {
                return str
                  .replace(/([A-Z])/g, ' $1') // Insert space before capital letters                  
                  .replace(/-([a-z])/gi, (match, letter) => ` ${letter.toUpperCase()}`) // Replace hyphens with spaces and Uppercase next letter
                  .replace(/^./, function(char) { return char.toUpperCase(); }) // Capitalize the first letter
                  .trim();
              };

              extra = extra || {};
              for(const [key, value] of Object.entries(deployChecksSummary["reportSummary"] || {})) {
                const value = {};
                for(const [metricKey, metricValue] of Object.entries(value)) {
                  value[toSentence(metricKey)] = metricValue;
                }

                extra[toSentence(key)] = value;
              }
            }

            return core.setOutput("extra", JSON.stringify(extra));

      # jscpd:ignore-start
      # FIXME: This is a workaround for having workflow actions. See https://github.com/orgs/community/discussions/38659
      - id: oidc
        uses: ChristopherHX/oidc@73eee1ff03fdfce10eda179f617131532209edbd # v3

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: ./self-workflow
          repository: ${{ steps.oidc.outputs.job_workflow_repo_name_and_owner }}
          ref: ${{ steps.oidc.outputs.job_workflow_repo_ref }}
          sparse-checkout: |
            actions
      - run: |
          if [ -f .gitignore ]; then grep -q "self-workflow" .gitignore || echo "self-workflow" >> .gitignore; else echo "self-workflow" >> .gitignore; fi
          if [ -f .dockerignore ]; then grep -q "self-workflow" .dockerignore || echo "self-workflow" >> .dockerignore; else echo "self-workflow" >> .dockerignore; fi
      # jscpd:ignore-end
      - uses: ./self-workflow/actions/deploy/report
        with:
          deployment-id: ${{ inputs.deployment-id }}
          environment: ${{ needs.get-finished-deployment.outputs.environment }}
          url: ${{ needs.get-finished-deployment.outputs.url }}
          extra: ${{ steps.get-extra.outputs.extra }}
          github-token: ${{ secrets.github-token || github.token }}

      # FIXME: This is a workaround for having workflow actions. See https://github.com/orgs/community/discussions/38659
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        if: always() && steps.oidc.outputs.job_workflow_repo_name_and_owner
        with:
          path: ./self-workflow
          repository: ${{ steps.oidc.outputs.job_workflow_repo_name_and_owner }}
          ref: ${{ steps.oidc.outputs.job_workflow_repo_ref }}
          sparse-checkout: |
            actions
