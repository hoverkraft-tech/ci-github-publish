# Finish deploy - ArgoCD App Of Apps
# ==========================
# Reusable workflow to finish a deploy process in an ArgoCD App Of Apps Pattern context.
# See <https://argo-cd.readthedocs.io/en/stable/operator-manual/cluster-bootstrapping/#app-of-apps-pattern>.
#
# This workflow is triggered by a repository dispatch event.
# See <https://docs.github.com/en/actions/reference/events-that-trigger-workflows#repository_dispatch>.
# Payload:
# ```json
# {
#   "event_type": "finish-deploy",
#   "client_payload": {
#     "deployment-id": "unique deployment id (e.g. 1234)",
#     "application-repository": "repository name (e.g. my-repository)",
#     "urls": "URL(s) of the deployed application. (e.g. ['https://my-application.com'])",
#     "status": "status of the deployment (e.g. "Synced", "failure")",
#     "description": "description of the deployment (e.g. "deployment successful")",
#   }
# }
# ```
---
name: Finish deploy - ArgoCD App of Apps
# jscpd:ignore-start
on:
  workflow_call:
    inputs:
      runs-on:
        description: |
          JSON array of runner(s) to use.
          See <https://docs.github.com/en/actions/using-jobs/choosing-the-runner-for-a-job>.
        type: string
        default: '["ubuntu-latest"]'
        required: false
      github-app-id:
        description: |
          GitHub App ID to generate GitHub token in place of github-token.
          See <https://github.com/actions/create-github-app-token>.
        required: false
        type: string
    secrets:
      github-token:
        description: |
          GitHub Token to update the deployment.
          Permissions:
            - deployments: write
          See <https://docs.github.com/en/rest/deployments/statuses?apiVersion=2022-11-28#create-a-deployment-status>.
      github-app-key:
        description: |
          GitHub App private key to generate GitHub token in place of github-token.
          See <https://github.com/actions/create-github-app-token>.
# jscpd:ignore-end
permissions:
  contents: read
  # FIXME: This is a workaround for having workflow actions. See https://github.com/orgs/community/discussions/38659
  id-token: write

jobs:
  finish-deploy:
    runs-on: ${{ fromJson(inputs.runs-on) }}
    outputs:
      repository: ${{ steps.check-client-payload.outputs.repository }}
      deployment-id: ${{ steps.check-client-payload.outputs.deployment-id }}
      url: ${{ steps.check-client-payload.outputs.url }}
      state: ${{ steps.get-state-from-status.outputs.state }}
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - id: check-client-payload
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            core.debug(`Client payload: ${JSON.stringify(${{ toJSON(github.event.client_payload) }})}`);

            const deploymentId = ${{ toJSON(github.event.client_payload['deployment-id']) }};
            if (!deploymentId) {
              return core.setFailed('"deployment-id" is not defined in the client payload');
            }
            core.setOutput("deployment-id", deploymentId);

            const repository = ${{ toJSON(github.event.client_payload['application-repository']) }};
            if (!repository) {
              return core.setFailed('"application-repository" is not defined in the client payload');
            }
            core.setOutput("repository", repository);

            let urls = ${{ toJSON(github.event.client_payload['urls']) }};
            if (urls) {
              if( !Array.isArray(urls)) {
                core.setFailed("URLs is not an array");
                return;
              }
              if (urls.length > 0) {
                const url = urls[0];

                try {
                  new URL(url);
                } catch (error) {
                  return core.setFailed(`Invalid URL "${url}": ${error.message}`);
                }
                core.setOutput("url", url);
              }
            }

            const status = ${{ toJSON(github.event.client_payload['status']) }};
            if (!status) {
              return core.setFailed('"status" is not defined in the client payload');
            }
            core.setOutput("status", status);

            const description = ${{ toJSON(github.event.client_payload['description']) }};
            if (!description) {
              return core.setFailed('"description" is not defined in the client payload');
            }
            core.setOutput("description", description);

      - id: get-state-from-status
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const status = ${{ toJSON(steps.check-client-payload.outputs.status) }};
            const expectedStatus = "success";

            const statesStatuses = {
              "error": [],
              "failure": [],
              "inactive": [],
              "in_progress": [],
              "queued": [],
              "pending": [],
              [expectedStatus]: ["Synced"],
            };

            for(const state in statesStatuses) {
              const statuses = statesStatuses[state];
              if (!statuses.includes(status)) {
                continue;
              }

              if (state !== expectedStatus) {
                return;
              }

              return core.setFailed(`Unexpected deployment status "${status}".`);
            }

            core.setFailed(`Status "${status}" is not valid. Valid statuses are: ${JSON.stringify(statesStatuses)}`);

      # FIXME: This is a workaround for having workflow actions. See https://github.com/orgs/community/discussions/38659
      - id: oidc
        uses: ChristopherHX/oidc@73eee1ff03fdfce10eda179f617131532209edbd # v3

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: ./self-workflow
          repository: ${{ steps.oidc.outputs.job_workflow_repo_name_and_owner }}
          ref: ${{ steps.oidc.outputs.job_workflow_repo_ref }}
          sparse-checkout: |
            actions
      - run: |
          if [ -f .gitignore ]; then grep -q "self-workflow" .gitignore || echo "self-workflow" >> .gitignore; else echo "self-workflow" >> .gitignore; fi
          if [ -f .dockerignore ]; then grep -q "self-workflow" .dockerignore || echo "self-workflow" >> .dockerignore; else echo "self-workflow" >> .dockerignore; fi

      - uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
        if: inputs.github-app-id
        id: generate-token
        with:
          app-id: ${{ inputs.github-app-id }}
          private-key: ${{ secrets.github-app-key }}
          owner: ${{ github.repository_owner }}

      - uses: ./self-workflow/actions/deploy/report
        if: always()
        with:
          deployment-id: ${{ github.event.client_payload['deployment-id'] }}
          repository: ${{ github.event.client_payload['application-repository'] }}
          github-token: ${{ steps.generate-token.outputs.token || secrets.github-token || github.token }}
          extra: |
            {
              "status": "${{ steps.check-client-payload.outputs.status }}",
              "description": "${{ steps.check-client-payload.outputs.description }}"
            }
