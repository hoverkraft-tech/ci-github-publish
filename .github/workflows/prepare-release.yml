# Prepare release
# ==========================
# Reusable workflow that performs release preparation tasks:
#
# - Add proper labels to pull requests
# - Ensure release configuration is up to date

name: Release Actions

on:
  workflow_call:
    inputs:
      runs-on:
        description: |
          Json array of runner(s) to use.
          See <https://docs.github.com/en/actions/using-jobs/choosing-the-runner-for-a-job>.
        type: string
        default: '["ubuntu-latest"]'
        required: false
      github-app-id:
        description: |
          GitHub App ID to generate GitHub token in place of github-token.
          See <https://github.com/actions/create-github-app-token>.
        required: false
        type: string
    secrets:
      github-token:
        description: |
          GitHub token with permissions `contents: write`, `pull-requests: write`.
      github-app-key:
        description: |
          GitHub App private key to generate GitHub token in place of github-token.
          See <https://github.com/actions/create-github-app-token>.

permissions:
  contents: read
  pull-requests: write

jobs:
  pull-request-labeler:
    runs-on: ${{ fromJson(inputs.runs-on) }}
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: release-drafter/release-drafter@b1476f6e6eb133afa41ed8589daba6dc69b4d3f5 # v6.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.github-token || github.token }}
        with:
          disable-releaser: true

  release-configuration:
    if: ${{ github.event_name == 'push' && github.event.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
    runs-on: ${{ fromJson(inputs.runs-on) }}
    env:
      CONFIG_PATH: .github/release-drafter.yml
    steps:
      - id: get-config
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const configPath = process.env.CONFIG_PATH;

            const config = `
            template: |
              # What's Changed
              \$CHANGES
              **Full Changelog**: https://github.com/\$OWNER/\$REPOSITORY/compare/\$PREVIOUS_TAG...\$RESOLVED_VERSION
            name-template: "Version \$RESOLVED_VERSION"
            tag-template: "\$RESOLVED_VERSION"
            prerelease-identifier: "rc"
            version-resolver:
              major:
                labels:
                  - "release-major"
              minor:
                labels:
                  - "release-minor"
              patch:
                labels:
                  - "release-patch"
              default: patch
            autolabeler:
              - label: "release-major"
                title:
                  - "/^BREAKING CHANGE:/"
              - label: "release-minor"
                title:
                  - "/^feat:/"
                  - "/^feat\\\\(.+\\\\):/"

            `;

            // Get the config file from the repository
            try {
              const { data: { content } } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: configPath,
              });

              const decodedContent = Buffer.from(content, 'base64').toString('utf-8');
              if (decodedContent === config) {
                core.info('No changes to the release configuration file.');
                return null;
              }
            } catch (error) {
              if (error.status !== 404) {
                throw error;
              }
            }

            core.setOutput('config', config.trim());

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        if: steps.get-config.outputs.config
        with:
          ref: refs/heads/${{ github.event.repository.default_branch }}
          sparse-checkout: ${{ env.CONFIG_PATH }}

      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: steps.get-config.outputs.config
        with:
          script: |
            const fs = require('node:fs');
            const configContent = ${{ toJSON(steps.get-config.outputs.config) }};
            const configPath = process.env.CONFIG_PATH;
            fs.writeFileSync(configPath, configContent, 'utf8');

      - uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        if: ${{ steps.get-config.outputs.config && inputs.github-app-id }}
        id: generate-token
        with:
          app-id: ${{ inputs.github-app-id }}
          private-key: ${{ secrets.github-app-key }}

      - uses: hoverkraft-tech/ci-github-common/actions/create-and-merge-pull-request@9a3d71ca9f68bc1061db8ea1442084ac31a0f8bf # 0.23.0
        if: steps.get-config.outputs.config
        with:
          github-token: ${{ steps.generate-token.outputs.token || secrets.github-token || github.token }}
          branch: ci/prepare-release-config
          title: "ci: prepare release configuration"
          body: "Prepare release configuration"
          commit-message: |
            ci: prepare release configuration

            [skip ci]
