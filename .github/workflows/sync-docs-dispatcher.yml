# Reusable workflow: Sync documentation to public-docs repository
#
# Purpose:
#
# - Download the uploaded documentation artifact
# - Generate a GitHub App token with appropriate permissions
# - Dispatch a repository event to hoverkraft-tech/public-docs
# - Pass artifact information to the receiver workflow
#
# Prerequisites:
#
# - GitHub App with `repo` and artifact access permissions configured
# - Documentation artifact uploaded by prepare-docs action

name: Sync Documentation Dispatcher

on:
  workflow_call:
    inputs:
      github-app-id:
        description: |
          GitHub App ID to generate GitHub token in place of github-token.
          See https://github.com/actions/create-github-app-token.
        required: false
        type: string
      artifact-id:
        description: |
          ID of the uploaded documentation artifact.
        required: true
        type: string
    secrets:
      github-app-key:
        description: |
          GitHub App private key to generate GitHub token in place of github-token.
          See https://github.com/actions/create-github-app-token.
        required: false

permissions:
  contents: read

jobs:
  sync-docs:
    name: Dispatch Documentation Sync
    runs-on: ubuntu-latest
    steps:
      # jscpd:ignore-start

      - uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42 # v2.1.4
        if: inputs.github-app-id
        id: generate-token
        with:
          app-id: ${{ inputs.github-app-id }}
          private-key: ${{ secrets.github-app-key }}
          owner: hoverkraft-tech
          repositories: public-docs

      # jscpd:ignore-end

      - id: dispatch
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        env:
          ARTIFACT_ID: ${{ inputs.artifact-id }}
          SOURCE_REPO: ${{ github.repository }}
          SOURCE_RUN_ID: ${{ github.run_id }}
          SOURCE_SHA: ${{ github.sha }}
        with:
          github-token: ${{ steps.generate-token.outputs.token || github.token }}
          script: |
            const artifactId = process.env.ARTIFACT_ID;
            const sourceRepo = process.env.SOURCE_REPO;
            const sourceRunId = process.env.SOURCE_RUN_ID;
            const sourceSha = process.env.SOURCE_SHA;

            if (!artifactId) {
              return core.setFailed('artifact-id is required');
            }

            core.info('Dispatching documentation sync event...');

            await github.rest.repos.createDispatchEvent({
              owner: 'hoverkraft-tech',
              repo: 'public-docs',
              event_type: 'sync-docs',
              client_payload: {
                artifact_id: artifactId,
                source_repo: sourceRepo,
                source_run_id: sourceRunId,
                source_sha: sourceSha,
              }
            });

            core.summary.addHeading('Documentation Dispatch Summary', 2);
            core.summary.addTable([
              [{data: 'Property', header: true}, {data: 'Value', header: true}],
              ['Artifact ID', artifactId],
              ['Source Repository', sourceRepo],
              ['Run ID', sourceRunId],
              ['Commit SHA', sourceSha],
            ]);
            await core.summary.write();

            core.info('âœ… Documentation sync event dispatched successfully');
