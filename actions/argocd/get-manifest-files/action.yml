name: "ArgoCD - Get Manifest Files"
author: hoverkraft
branding:
  icon: grid
  color: blue
description: Determine all the manifest files needed to deploy the application using ArgoCD for the given context.

inputs:
  environment:
    description: |
      Environment name (e.g. production, review-apps:pr-1234).
      This is used to determine the application directory and extra manifest directory.
      The environment name can be suffixed with a colon and a suffix (e.g. review-apps:pr-1234).
    required: true
  repository:
    description: "repository name (e.g. my-repository)"
    required: true

outputs:
  application-file:
    description: "The file to be used for deployment"
    value: ${{ steps.get-files.outputs.application-file }}
  manifest-file:
    description: "The file to be used for extra manifest"
    value: ${{ steps.get-files.outputs.manifest-file }}

runs:
  using: "composite"
  steps:
    - id: parse-environment
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        script: |
          let environment = ${{ toJSON(inputs.environment) }};
          if (!environment) {
            return core.setFailed(`"environment" input is not defined`);
          }

          // Get suffix from environment
          const environmentParts = environment.split(":");

          environment = environmentParts[0];
          const environmentSuffix = environmentParts[1];

          core.setOutput("environment", environment);
          core.setOutput("environment-suffix", environmentSuffix);

    - id: get-directories
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        script: |
          const fs = require("node:fs");
          const path = require("node:path");

          const environment = ${{ toJSON(steps.parse-environment.outputs.environment) }};

          const globber = await glob.create(`./*/apps/${environment}/`,{ implicitDescendants: false, matchDirectories: true });
          const paths = await globber.glob();
          if (paths.length === 0) {
            return core.setFailed(`No environment dir found for ${environment}`);
          }

          if (paths.length > 1) {
            return core.setFailed(`Multiple environment dirs found for ${environment}: ${paths.join(", ")}`);
          }

          const environmentDir = paths[0];

          const repository = ${{ toJSON(inputs.repository) }};
          if (!repository) {
            return core.setFailed("Repository is not defined in the client payload");
          }

          const applicationDir = `${environmentDir}/${repository}`;
          if (!fs.existsSync(applicationDir)) {
            return core.setFailed(`No application dir found for "${repository}" in "${environmentDir}"`);
          }
          core.setOutput("application-dir", applicationDir);

          // Check if the application dir has a manifest dir
          const rootDir = path.resolve(`${environmentDir}/../..`);

          const manifestDir = `${rootDir}/manifests/${environment}/${repository}`;
          if (!fs.existsSync(manifestDir)) {
            return core.setFailed(`No manifest dir found in "${manifestDir}"`);
          }

          core.setOutput("manifest-dir", path.relative(${{ toJSON(github.workspace) }}, manifestDir));

    - id: get-files
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        script: |
          const fs = require("node:fs");
          const path = require("node:path");

          const repository = ${{ toJSON(inputs.repository) }};
          const environmentSuffix = ${{ toJSON(steps.parse-environment.outputs.environment-suffix) }};
          const applicationDir = ${{ toJSON(steps.get-directories.outputs.application-dir) }};
          const manifestDir = ${{ toJSON(steps.get-directories.outputs.manifest-dir) }};

          // Templatable application
          if (environmentSuffix) {
            const applicationFile = `${applicationDir}/${environmentSuffix}.yml`;
            core.setOutput("application-file", path.relative(${{ toJSON(github.workspace) }}, applicationFile));

            const manifestFile = `${manifestDir}/${environmentSuffix}.yml`;
            core.setOutput("manifest-file", path.relative(${{ toJSON(github.workspace) }}, manifestFile));

            return;
          }

          const applicationFile = `${applicationDir}/${repository}.yml`;
          if (!fs.existsSync(applicationFile)) {
            return core.setFailed(`No application file found in "${applicationFile}"`);
          }
          core.setOutput("application-file", path.relative(${{ toJSON(github.workspace) }}, applicationFile));

          const manifestFile = `${manifestDir}/${repository}.yml`;
          if(!fs.existsSync(manifestFile)) {
            return core.setFailed(`No manifest file found in "${manifestFile}"`);
          }
          core.setOutput("manifest-file", path.relative(${{ toJSON(github.workspace) }}, manifestFile));
