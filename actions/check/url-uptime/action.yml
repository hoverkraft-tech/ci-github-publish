name: "Check - URL - Uptime"
description: "Action to run uptime check on given URL."
author: hoverkraft
branding:
  icon: activity
  color: blue

inputs:
  url:
    description: "The URL to check."
    required: true
  expected-statuses:
    description: "Expected HTTP status codes. Comma separated list."
    required: false
    default: "200"

outputs:
  status-code:
    description: "The HTTP status code returned by the URL check."
    value: ${{ steps.check-url.outputs.status-code }}
  result:
    description: "The result message of the URL check."
    value: ${{ steps.check-url.outputs.result }}

runs:
  using: composite
  steps:
    - id: check-url
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const https = require('https');

          const urlInput = ${{ toJson(inputs.url ) }};
          if (!urlInput) {
            return core.setFailed("URL input is required.");
          }

          const url = new URL(urlInput.trim());
          if (!url.protocol || !url.host) {
            return core.setFailed("Invalid URL input. Please provide a valid URL.");
          }

          const expectedStatusesInput = ${{ toJson(inputs.expected-statuses) }};
          if (!expectedStatusesInput) {
            return core.setFailed("Expected statuses input is required.");
          }
          const expectedStatuses = expectedStatusesInput.split(",").map(s => s.trim());
          if(!expectedStatuses.length) {
            return core.setFailed("Expected statuses input cannot be empty.");
          }

          // Check that the URL is reachable
          const options = {
            method: 'HEAD',
            host: url.host,
            path: url.pathname,
            headers: {
              'User-Agent': 'GitHub Action - Node.js'
            }
          };

          https.request(options, (res) => {
            const statusCode = res.statusCode;
            core.setOutput("status-code", statusCode);
            if (expectedStatuses.includes(statusCode.toString())) {
              return `URL ${url.href} is up with status code ${statusCode}.`;
            }
            core.setFailed(`Unexpected status code for ${url.href}: ${statusCode}`);
          }).on('error', (err) => {
            core.setFailed(`Error checking URL: ${err.message}`);
          }).end();
