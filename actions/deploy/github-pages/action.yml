name: "Deploy - GitHub Pages"
description: "Action to deploy a static site to GitHub Pages."
author: hoverkraft
branding:
  icon: upload-cloud
  color: blue

inputs:
  build-path:
    description: |
      The path to the assets to deploy.
      Can be absolute or relative $GITHUB_WORKSPACE.
    required: false
  build-artifact-name:
    description: 'The name of the "build" artifact to download.'
    required: false
    default: ""
  budget-path:
    description: "The path to the performance budget file. See action [Check - URL - Lighthouse](../../check/url-lighthouse/README.md)."
    required: false
    default: "./budget.json"
  static-site-generator:
    description: |
      The static site generator used to build the site. See https://github.com/actions/configure-pages.
    required: false
  github-token:
    description: |
      GitHub Token for deploying to GitHub Pages.
      Permissions:
        - pages: write
        - id-token: write
      See https://github.com/actions/configure-pages.
    required: false
    default: ${{ github.token }}

outputs:
  url:
    description: "The URL of the deployed site."
    value: ${{ steps.deployment.outputs.page_url }}

runs:
  using: "composite"
  steps:
    - id: download-artifact
      if: ${{ inputs.build-artifact-name != '' }}
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: ${{ inputs.build-artifact-name }}
        path: "/"

    - id: prepare-variables
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        script: |
          const { isAbsolute, join } = require("path");
          const { lstatSync } = require("fs");
          const { randomUUID } = require('crypto');

          let downloadPath = ${{ toJSON(steps.download-artifact.outputs.download-path) }};
          if (!downloadPath || downloadPath === "/") {
            downloadPath = ${{ toJSON(github.workspace) }};
          }

          let buildPath = ${{ toJSON(inputs.build-path) }};
          if (!buildPath || !isAbsolute(buildPath)) {
            buildPath = join(downloadPath.trim(), buildPath.trim());
          }

          // Check if the build path exists and is a directory
          if (!lstatSync(buildPath).isDirectory()) {
            return core.setFailed(`Build path does not exist or is not a directory: ${buildPath}`);
          }

          core.setOutput("build-path", buildPath);

          // Define a unique artifact name
          const uniquid = randomUUID();
          const timestamp = Date.now();
          const artifactName = `${{ github.run_id }}-${{ github.run_number }}-github-pages-${timestamp}-${uniquid}`;
          core.setOutput("artifact-name", artifactName);

    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: mkdir -p ./self-github-pages-action/ && cp -r $GITHUB_ACTION_PATH/../../* ./self-github-pages-action/

    - uses: ./self-github-pages-action/deploy/jampack
      with:
        path: ${{ steps.prepare-variables.outputs.build-path }}

    - name: ‚öôÔ∏è Setup Pages
      uses: actions/configure-pages@983d7736d9b0ae728b81ab479565c72886d7745b # v5.0.0
      with:
        static_site_generator: ${{ inputs.static-site-generator }}
        token: ${{ inputs.github-token }}
        enablement: true

    - name: üì¶ Upload website build artifact
      uses: actions/upload-pages-artifact@7b1f4a764d45c48632c6b24a0339c27f5614fb0b # v4.0.0
      with:
        path: ${{ steps.prepare-variables.outputs.build-path }}
        name: ${{ steps.prepare-variables.outputs.artifact-name }}

    - name: üöÄ Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4.0.5
      with:
        artifact_name: ${{ steps.prepare-variables.outputs.artifact-name }}

    # jscpd:ignore-start

    # Url checks
    - uses: ./self-github-pages-action/check/url-ping
      with:
        url: ${{ steps.deployment.outputs.page_url }}

    - uses: ./self-github-pages-action/check/url-lighthouse
      with:
        url: ${{ steps.deployment.outputs.page_url }}
        budget-path: ${{ inputs.budget-path }}

    # jscpd:ignore-end

    - shell: bash
      run: |
        STEP_SUMMARY=$(cat << EOF
        ### Github Page has been deployed :rocket:

        Here it is: <${{ steps.deployment.outputs.page_url }}>

        \`\`\`
        ${{ steps.deployment.outputs.page_url }}
        \`\`\`
        EOF
        )

        echo "$STEP_SUMMARY" >> $GITHUB_STEP_SUMMARY
