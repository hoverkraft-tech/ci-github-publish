name: Deploy - Report
author: hoverkraft
branding:
  icon: list
  color: blue
description: |
  Generate a post-deployment report and update GitHub with the deployment result.

  This action collects the workflow run result and builds a human-friendly deployment
  summary that is written to the GitHub Actions summary (visible in the workflow run UI).
  The report can include:

  - the deployment environment,
  - a link to the workflow logs,
  - the deployed application URL (if provided),
  - an optional list of failed jobs (when the run failed),
  - additional key-value pairs passed through the `extra` input.

  When `deployment-id` and `repository` are supplied, the action will also update the
  corresponding GitHub Deployment status (state, description and URL). If triggered by
  an `issue_comment` event the action can post (or update) an issue/PR comment and add
  a reaction to the original comment to provide inline feedback about the deployment.
inputs:
  repository:
    description: "The repository where the deployment was made"
    required: false
    default: "${{ github.event.repository.name }}"
  deployment-id:
    description: Deployment ID to report.
    required: false
  environment:
    description: Environment where the deployment was made.
    required: false
  url:
    description: URL where the deployment is available.
    required: false
  extra:
    description: Extra outputs to be included in the summary. JSON object with key-value pairs.
    required: false
  github-token:
    description: |
      GitHub Token to update the deployment.
      Permissions:
        - deployments: write
      See https://docs.github.com/en/rest/deployments/statuses?apiVersion=2022-11-28#create-a-deployment-status.
    required: false
    default: ${{ github.token }}

outputs:
  url:
    description: "URL of the deployed application"
    value: ${{ steps.deployment.outputs.url }}

runs:
  using: "composite"
  steps:
    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: mkdir -p ./self-deploy-report-action/ && cp -r $GITHUB_ACTION_PATH/../../* ./self-deploy-report-action/

    - id: get-workflow-failure
      uses: ./self-deploy-report-action/workflow/get-workflow-failure
      with:
        github-token: ${{ inputs.github-token }}

    - id: get-deployment
      if: inputs.environment == '' && inputs.repository && inputs.deployment-id
      uses: ./self-deploy-report-action/deployment/read
      with:
        github-token: ${{ inputs.github-token }}
        repository: ${{ inputs.repository }}
        deployment-id: ${{ inputs.deployment-id }}

    - id: get-deployment-result
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      env:
        INPUT_ENVIRONMENT: ${{ inputs.environment }}
        STEP_DEPLOYMENT_ENVIRONMENT: ${{ steps.get-deployment.outputs.environment }}
        INPUT_URL: ${{ inputs.url }}
        EVENT_NAME: ${{ github.event_name }}
        STEP_HAS_FAILED: ${{ steps.get-workflow-failure.outputs.has-failed }}
        STEP_FAILED_JOBS: ${{ steps.get-workflow-failure.outputs.failed-jobs }}
        INPUT_EXTRA: ${{ inputs.extra }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const run = require('./self-deploy-report-action/deploy/report/scripts/get-deployment-result.js');
          await run({
            github,
            context,
            core,
            environment: process.env.INPUT_ENVIRONMENT,
            deploymentEnvironment: process.env.STEP_DEPLOYMENT_ENVIRONMENT,
            url: process.env.INPUT_URL,
            eventName: process.env.EVENT_NAME,
            hasFailed: process.env.STEP_HAS_FAILED,
            failedJobs: process.env.STEP_FAILED_JOBS,
            extra: process.env.INPUT_EXTRA,
          });

    - uses: ./self-deploy-report-action/deployment/update
      if: inputs.deployment-id && inputs.repository
      with:
        deployment-id: ${{ inputs.deployment-id }}
        repository: ${{ inputs.repository }}
        url: ${{ steps.get-deployment-result.outputs.url }}
        state: ${{ steps.get-deployment-result.outputs.state }}
        description: ${{ steps.get-deployment-result.outputs.message }}
        update-log-url: ${{ inputs.repository == github.event.repository.name && 'true' || 'false' }}
        github-token: ${{ inputs.github-token }}

    - uses: hoverkraft-tech/ci-github-common/actions/create-or-update-comment@b7dd413209df265bef8d7eb0efb117eaabc684c4 # 0.27.0
      if: ${{ steps.get-deployment-result.outputs.is-issue-comment == 'true' }}
      with:
        title: "## ${{ steps.get-deployment-result.outputs.title }}"
        body: |
          ${{ steps.get-deployment-result.outputs.message }}
        reactions: ${{ steps.get-deployment-result.outputs.reaction }}

    - if: ${{ steps.get-deployment-result.outputs.is-issue-comment == 'true' }}
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const repository = `${{ inputs.repository }}` || context.repo.repo;

          const issueCommentPayload = {
              owner: context.repo.owner,
              repo: repository,
              comment_id: context.payload.comment.id,
          }

          const issueCommentEyesReactions = (await github.paginate(
            github.rest.reactions.listForIssueComment.endpoint.merge(issueCommentPayload)
          )).filter(reaction => reaction.content === "eyes");

          await Promise.all(issueCommentEyesReactions.map(reaction => github.rest.reactions.deleteForIssueComment({
            ...issueCommentPayload,
            reaction_id: reaction.id
          })));

          await github.rest.reactions.createForIssueComment({
              ...issueCommentPayload,
              content: "${{ steps.get-deployment-result.outputs.reaction }}"
          });
