name: Deploy - Report
author: hoverkraft
branding:
  icon: list
  color: blue
description: |
  Generate a post-deployment report and update GitHub with the deployment result.

  This action collects the workflow run result and builds a human-friendly deployment
  summary that is written to the GitHub Actions summary (visible in the workflow run UI).
  The report can include:

  - the deployment environment,
  - a link to the workflow logs,
  - the deployed application URL (if provided),
  - an optional list of failed jobs (when the run failed),
  - additional key-value pairs passed through the `extra` input.

  When `deployment-id` and `repository` are supplied, the action will also update the
  corresponding GitHub Deployment status (state, description and URL). If triggered by
  an `issue_comment` event the action can post (or update) an issue/PR comment and add
  a reaction to the original comment to provide inline feedback about the deployment.
inputs:
  repository:
    description: "The repository where the deployment was made"
    required: false
    default: "${{ github.event.repository.name }}"
  deployment-id:
    description: Deployment ID to report.
    required: false
  environment:
    description: Environment where the deployment was made.
    required: false
  url:
    description: URL where the deployment is available.
    required: false
  extra:
    description: Extra outputs to be included in the summary. JSON object with key-value pairs.
    required: false
  github-token:
    description: |
      GitHub Token to update the deployment.
      Permissions:
        - deployments: write
      See https://docs.github.com/en/rest/deployments/statuses?apiVersion=2022-11-28#create-a-deployment-status.
    required: false
    default: ${{ github.token }}

outputs:
  url:
    description: "URL of the deployed application"
    value: ${{ steps.deployment.outputs.url }}

runs:
  using: "composite"
  steps:
    - shell: bash
      # FIXME: workaround until will be merged: https://github.com/actions/runner/pull/1684
      run: mkdir -p ./self-deploy-report-action/ && cp -r $GITHUB_ACTION_PATH/../../* ./self-deploy-report-action/

    - id: get-workflow-failure
      uses: ./self-deploy-report-action/workflow/get-workflow-failure

    - id: get-deployment
      if: inputs.environment == '' && inputs.repository && inputs.deployment-id
      uses: ./self-deploy-report-action/deployment/read
      with:
        repository: ${{ inputs.repository }}
        deployment-id: ${{ inputs.deployment-id }}

    - id: get-deployment-result
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        script: |
          const environment = `${{ steps.get-deployment.outputs.environment || inputs.environment }}`.trim();
          const url = `${{ inputs.url }}` ?? null;
          const isIssueComment = `${{ github.event_name }}` === "issue_comment";
          if (isIssueComment) {
            core.setOutput("is-issue-comment", isIssueComment);
          }

          const { data: { html_url } } = await github.rest.actions.getWorkflowRun({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });

          const hasFailed = ${{ toJSON(steps.get-workflow-failure.outputs.has-failed) }} === 'true';

          let state, title, message, reaction;

          if (hasFailed) {
            state = "failure";
            title = `Failed to deploy${environment?` to <strong>${environment}</strong>`:``} :confused: !`;
            message = `The deployment has failed. Please check the <a href="${html_url}">logs</a> and try again.`;

            const failedJobsOutput = ${{ toJSON(steps.get-workflow-failure.outputs.failed-jobs) }};
            if (failedJobsOutput) {
              // Check if is valid JSON
              let failedJobs = null;
              try {
                failedJobs = JSON.parse(failedJobsOutput);
              } catch (error) {
                core.setFailed(`"failed-jobs" output is not a valid JSON: ${error}`);
              }

              if (!Array.isArray(failedJobs)) {
                core.setFailed(`Output "failed-jobs" expected to be a JSON array.`);
              }

              message += "\n\n\n### The following jobs have failed:\n";

              for (const { name, conclusion, html_url } of failedJobs) {
                message += `- **${name}**: [${conclusion}](${html_url})\n`;
              }
            }

            reaction = "confused";
          } else {
            state = "success";
            title = `Successful deployment${environment?` to <strong>${environment}</strong>`:``} :sparkles: !`;

            message = "";
            if (url) {
              message += `Here it is: <a href="${url}">${url}</a>\n\n\`\`\`\n${url}\n\`\`\`\n\n`;
            }

            if (isIssueComment) {
              message += `Once the Pull Request gets merged or closed, the review app will automatically be deleted.\n\n`;
            }

            reaction = "rocket";
          }

          core.setOutput("state", state);
          core.setOutput("title", title);
          core.setOutput("message", message);
          core.setOutput("reaction", reaction);

          const summaryList = [
              `Logs: <a href="${html_url}">${context.workflow}</a>`,
          ];

          if (environment) {
            summaryList.unshift(`Environment: ${environment}`);
          }

          const extraInput = ${{ toJSON(inputs.extra) }};
          if (extraInput) {
            // Check if is valid JSON
            let extra = null;
            try {
              extra = JSON.parse(extraInput);
            } catch (error) {
              core.setFailed(`"extra" input is not a valid JSON: ${error}`);
            }

            if (extra && typeof extra === 'object') {
              for (const [key, value] of Object.entries(extra)) {
                const itemName = key.charAt(0).toUpperCase() + key.slice(1);
                summaryList.push(`${itemName}: ${value}`);
              }
            } else {
              core.warning(`"extra" input is not a valid JSON object.`);
            }
          }

          core.summary
            .addHeading(`Deployment summary${environment?` - ${environment}`:``}`, 2)
            .addRaw(title, true)
            .addBreak().addBreak()
            .addRaw(message, false)
            .addSeparator()
            .addList(summaryList)
            .write();

    - uses: ./self-deploy-report-action/deployment/update
      if: inputs.deployment-id && inputs.repository
      with:
        deployment-id: ${{ inputs.deployment-id }}
        repository: ${{ inputs.repository }}
        url: ${{ inputs.url }}
        state: ${{ steps.get-deployment-result.outputs.state }}
        description: ${{ steps.get-deployment-result.outputs.message }}
        update-log-url: ${{ inputs.repository == github.event.repository.name && "true" || "false" }}
        github-token: ${{ inputs.github-token }}

    - uses: hoverkraft-tech/ci-github-common/actions/create-or-update-comment@1c379f7f6e0fc850fe5a7111f74d54e159b4dcd2 # 0.26.0
      if: ${{ steps.get-deployment-result.outputs.is-issue-comment == 'true' }}
      with:
        title: "## ${{ steps.get-deployment-result.outputs.title }}"
        body: |
          ${{ steps.get-deployment-result.outputs.message }}
        reactions: ${{ steps.get-deployment-result.outputs.reaction }}

    - if: ${{ steps.get-deployment-result.outputs.is-issue-comment == 'true' }}
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        script: |
          const repository = `${{ inputs.repository }}` || context.repo.repo;

          const issueCommentPayload = {
              owner: context.repo.owner,
              repo: repository,
              comment_id: context.payload.comment.id,
          }

          const issueCommentEyesReactions = (await github.paginate(
            github.rest.reactions.listForIssueComment.endpoint.merge(issueCommentPayload)
          )).filter(reaction => reaction.content === "eyes");

          await Promise.all(issueCommentEyesReactions.map(reaction => github.rest.reactions.deleteForIssueComment({
            ...issueCommentPayload,
            reaction_id: reaction.id
          })));

          await github.rest.reactions.createForIssueComment({
              ...issueCommentPayload,
              content: "${{ steps.get-deployment-result.outputs.reaction }}"
          });
