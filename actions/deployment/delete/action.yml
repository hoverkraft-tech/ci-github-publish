name: "Delete deployment(s)"
description: "Action to delete some deployment(s) for the current ref. It also deletes the associated review apps environment(s) if any."
author: Hoverkraft
branding:
  icon: trash-2
  color: gray-dark

inputs:
  token:
    description: "The token to use to delete the review apps environment(s). It needs the `repo` scope."
    required: false

outputs:
  deployment-ids:
    description: "The id(s) of the deleted deployment(s). Json array format."
    value: ${{ steps.delete-deployments.outputs.deployment-ids }}
  environments:
    description: "The name(s) of the environment(s) related to  deleted deployment(s). Json array format."
    value: ${{ steps.delete-deployments.outputs.environments }}

runs:
  using: "composite"
  steps:
    - id: delete-deployments
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const issueNumber = context.issue?.number ?? undefined;

          const ref = issueNumber
            ? `refs/pull/${issueNumber}/head`
            : context.ref;

          if (!ref) {
            core.setFailed('No ref found.');
            return;
          }

          const deployments = await github.paginate(github.rest.repos.listDeployments, {
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref,
          });

          const deploymentIds = [];
          const environments = new Set();

          const { data: { html_url } } = await github.rest.actions.getWorkflowRun({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });

          for (const deployment of deployments) {
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
              state: "inactive",
              log_url: html_url,
              auto_inactive: true,
            });

            await github.rest.repos.deleteDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.id,
            });

            deploymentIds.push(deployment.id);
            environments.add(deployment.environment);
          }

          const reviewAppsEnvironments = Array.from(environments).filter((environment) => environment.startsWith('review-apps'));

          core.setOutput('deployment-ids', JSON.stringify(deploymentIds));
          core.setOutput('environments', JSON.stringify(Array.from(environments)));
          core.setOutput('review-apps-environments', JSON.stringify(reviewAppsEnvironments));

    - id: delete-review-apps-environments
      if: steps.delete-deployments.outputs.review-apps-environments != '[]'
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        github-token: ${{ inputs.token }}
        script: |
          const reviewAppsEnvironments = JSON.parse(`${{ steps.delete-deployments.outputs.review-apps-environments }}`);
          for (const environment of reviewAppsEnvironments) {
            // Environment may be unavailable if it was already deleted or if the token does not have access to it
            try {
              await github.rest.repos.deleteDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                environment_name: environment,
              });
            } catch (error) {
              if (error.status === 404) {
                core.warning(
                  `Environment "${environment}" for "${context.repo.owner}/${context.repo.repo}" cannot be deleted as it is not found`
                )
              } else {
                throw error
              }
            }
          }
