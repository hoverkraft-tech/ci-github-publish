name: "Get finished deployment"
description: "Action to wait for a deployment to finish"
author: Hoverkraft
branding:
  icon: arrow-right-circle
  color: gray-dark

inputs:
  deployment-id:
    description: "The id of the deployment to update"
    required: true
  timeout:
    description: "Timeout in seconds"
    required: false
    default: "240"
  allow-failure:
    description: |
      Defines if the action should fail if the deployment status is not "success".
    required: false
    default: "false"

outputs:
  status:
    description: "The status of the deployment"
    value: ${{ steps.get-deployment-status.outputs.status }}
  url:
    description: "The URL of the deployment"
    value: ${{ steps.get-deployment-status.outputs.url }}
  environment:
    description: "The environment of the deployment"
    value: ${{ steps.get-deployment-status.outputs.environment }}

runs:
  using: "composite"
  steps:
    - id: get-deployment-status
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const deploymentId = `${{ inputs.deployment-id }}`;
          const finishedStatuses = ["success", "failure", "error"];

          const timeout = parseInt(`${{ inputs.timeout }}`, 10);
          if (isNaN(timeout) || timeout <= 0) {
            core.setFailed(`Invalid timeout value: ${timeout}`);
            return;
          }

          async function isDeploymentFinished(deploymentId) {
            const deploymentStatuses = await github.paginate(
              github.rest.repos.listDeploymentStatuses.endpoint.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deploymentId,
              })
            );

            // Order by updated_at descending
            deploymentStatuses.sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at));
            if (deploymentStatuses.length === 0) {
              return null;
            }

            const deploymentStatus = deploymentStatuses[0];
            
            const state = deploymentStatus.state;
            core.info(`Deployment status state: ${state}`);

            if (finishedStatuses.includes(state)) {
              return deploymentStatus;
            }

            return null;
          }

          async function waitForDeployment(deploymentId, timeout) {
              const startTime = Date.now();
              let delay = 1000; // Start with 1 second interval

              while (Date.now() - startTime < timeout * 1000) {
                  const deploymentStatus = await isDeploymentFinished(deploymentId);
                  if (deploymentStatus !== null) {
                      return deploymentStatus;
                  }
                  
                  core.info(`Waiting for deployment... Next check in ${delay / 1000} seconds`);
                  await new Promise(resolve => setTimeout(resolve, delay));
                  
                  delay = Math.min(delay * 2, timeout * 1000); // Exponential backoff up to timeout max
              }
              return null;
          }

          const deploymentStatus = await waitForDeployment(deploymentId, timeout);

          if (!deploymentStatus) {
            core.setFailed(`Deployment ${deploymentId} did not finish within ${timeout} seconds.`);
            return;
          }          

          core.setOutput("url", deploymentStatus.environment_url);
          core.setOutput("status", deploymentStatus.state);
          core.setOutput("environment", deploymentStatus.environment);

          const allowFailure = `${{ inputs.allow-failure }}`.toLowerCase() === "true";
          if (!allowFailure && deploymentStatus.state !== "success") {
            core.setFailed(`Deployment ${deploymentId} failed with status: ${deploymentStatus.state}`);
          }

          core.info(`Deployment ${deploymentId} finished with status: ${deploymentStatus.state}`);
