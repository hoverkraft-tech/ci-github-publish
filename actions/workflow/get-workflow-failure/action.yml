name: "Deployment - Get workflow failure"
description: |
  Inspect the current workflow run and return any failed jobs.

  This action calls the GitHub Actions API to list all jobs for the workflow run that triggered the current workflow (using `context.runId`).
  It filters jobs with terminal failure conclusions (for example `failure` and `timed_out`)
  and exposes a JSON list of the failed jobs together with a boolean flag indicating whether any job failed.
  Each failed job entry contains the job name, its conclusion, and the job web URL for quick access.

  Note: this action reads jobs for the current run and therefore relies on the workflow run context;
  the default `GITHUB_TOKEN` already has read access to Actions in typical workflows.
author: hoverkraft
branding:
  icon: zap-off
  color: blue

inputs:
  github-token:
    description: |
      GitHub Token to get workflow information.
      Permissions:
        - actions: read
      See https://docs.github.com/en/rest/actions/workflows#list-jobs-for-a-workflow-run.
    required: false
    default: ${{ github.token }}

outputs:
  failed-jobs:
    description: |
      JSON array (string) of failed job objects. Each object contains:
      - `name`: job name
      - `conclusion`: job conclusion (e.g. `failure`, `timed_out`)
      - `html_url`: link to the job run in GitHub UI
      Example:
      ```json
      [
        { "name": "build", "conclusion": "failure", "html_url": "https://..." }
      ]
      ```
    value: ${{ steps.get-deployment-result.outputs.failed-jobs }}
  has-failed:
    description: "Boolean (string) value: `true` if at least one job failed, otherwise `false`."
    value: ${{ steps.get-deployment-result.outputs.has-failed }}

runs:
  using: "composite"
  steps:
    - id: get-deployment-result
      uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const { data: { jobs } } = await github.rest.actions.listJobsForWorkflowRun({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });

          const failureConclusions = ["failure", "timed_out"];
          const failedJobs = jobs
            .filter(job => failureConclusions.includes(job.conclusion))
            .reduce((acc, job) => {
              acc.push({
                name: job.name,
                conclusion: job.conclusion,
                html_url: job.html_url,
              });
              return acc;
          }, []);

          core.setOutput("failed-jobs", JSON.stringify(failedJobs));
          core.setOutput("has-failed", failedJobs.length > 0);
